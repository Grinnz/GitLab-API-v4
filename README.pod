=pod

=encoding utf8

=head1 NAME

GitLab::API::v4 - A complete GitLab API v4 client.

=head1 SYNOPSIS

    use GitLab::API::v4;
    
    my $api = GitLab::API::v4->new(
        url           => $v4_api_url,
        private_token => $token,
    );
    
    my $branches = $api->branches( $project_id );

=head1 DESCRIPTION

This module provides a one-to-one interface with the GitLab
API v4.  Much is not documented here as it would just be duplicating
GitLab's own L<API Documentation|http://doc.gitlab.com/ce/api/README.html>.

Note that this distribution also includes the L<gitlab-api-v4> command-line
interface (CLI).

=head2 Upgrading

If you are upgrading from L<GitLab::API::v3> make sure you read:

L<https://docs.gitlab.com/ce/api/v3_to_v4.html>

Also, review the C<Changes> file included in the distribution as it outlines
the changes made to convert the v3 module to v4:

L<https://github.com/bluefeet/GitLab-API-v4/blob/master/Changes>

Finally, be aware that many methods were added, removed, renamed, and/or altered.
If you want to review exactly what was changed you can use GitHub's compare tool:

L<https://github.com/bluefeet/GitLab-API-v4/compare/72e384775c9570f60f8ef68dee3a1eecd347fb69...master>

Or clone the repo and run this command:

C<git diff 72e384775c9570f60f8ef68dee3a1eecd347fb69..HEAD -- author/sections/>

=head2 Credentials

Authentication credentials may be defined by setting either the L</access_token>
or L</private_token> arguments.

If no credentials are supplied then the client will be anonymous and greatly
limited in what it can do with the API.

Extra care has been taken to hide the token arguments behind closures.  This way,
if you dump your api object, your tokens won't accidentally leak into places you
don't want them to.

=head2 Constants

The GitLab API, in rare cases, uses a hard-coded value to represent a state.
To make life easier the L<GitLab::API::v4::Constants> module exposes
these states as named variables.

=head2 Exceptions

The API methods will all throw a useful exception if
an unsuccessful response is received from the API.  That is except for
C<GET> requests that return a C<404> response - these will return C<undef>
for methods that return a value.

If you'd like to catch and handle these exceptions consider using
L<Try::Tiny>.

=head2 Logging

This module uses L<Log::Any> and produces some debug messages here
and there, but the most useful bits are the info messages produced
just before each API call.

=head2 Project ID

Note that many API calls require a C<$project_id>.  This can be
specified as a numeric project C<ID> or, in many cases, maybe all cases,
as a C<NAMESPACE_PATH/PROJECT_PATH> string.  The GitLab documentation on
this point is vague.

=head1 REQUIRED ARGUMENTS

=head2 url

The URL to your v4 API endpoint.  Typically this will be something
like C<https://git.example.com/api/v4>.

=head1 OPTIONAL ARGUMENTS

=head2 access_token

A GitLab API OAuth2 token.  If set then L</private_token> may not be set.

See L<https://docs.gitlab.com/ce/api/#oauth2-tokens>.

=head2 private_token

A GitLab API personal token.  If set then L</access_token> may not be set.

See L<https://docs.gitlab.com/ce/api/#personal-access-tokens>.

=head2 retries

The number of times the request should be retried in case it fails (5XX HTTP
response code).  Defaults to C<0> (false), meaning that a failed request will
not be retried.

=head2 sudo_user

The user to execute API calls as.  You may find it more useful to use the
L</sudo> method instead.

See L<https://docs.gitlab.com/ce/api/#sudo>.

=head2 rest_client

An instance of L<GitLab::API::v4::RESTClient> (or whatever L</rest_client_class>
is set to).  Typically you will not be setting this as it defaults to a new
instance and customization should not be necessary.

=head2 rest_client_class

The class to use when constructing the L</rest_client>.
Defaults to L<GitLab::API::v4::RESTClient>.

=head1 UTILITY METHODS

=head2 paginator

    my $paginator = $api->paginator( $method, @method_args );
    
    my $members = $api->paginator('group_members', $group_id);
    while (my $member = $members->next()) {
        ...
    }
    
    my $users_pager = $api->paginator('users');
    while (my $users = $users_pager->next_page()) {
        ...
    }
    
    my $all_open_issues = $api->paginator(
        'issues',
        $project_id,
        { state=>'opened' },
    )->all();

Given a method who supports the C<page> and C<per_page> parameters,
and returns an array ref, this will return a L<GitLab::API::v4::Paginator>
object that will allow you to walk the records one page or one record
at a time.

=head2 sudo

    $api->sudo('fred')->create_issue(...);

Returns a new instance of L<GitLab::API::v4> with the L</sudo_user> argument
set.

See L<https://docs.gitlab.com/ce/api/#sudo>.

=head1 API METHODS

=head2 Award Emoji

See L<https://docs.gitlab.com/ce/api/award_emoji.html>.

=over

=item issue_award_emojis

    my $award_emojis = $api->issue_award_emojis(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/award_emoji> and returns the decoded response content.

=item merge_request_award_emojis

    my $award_emojis = $api->merge_request_award_emojis(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/award_emoji> and returns the decoded response content.

=item snippet_award_emojis

    my $award_emojis = $api->snippet_award_emojis(
        $project_id,
        $merge_request_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_id/award_emoji> and returns the decoded response content.

=item issue_award_emoji

    my $award_emoji = $api->issue_award_emoji(
        $project_id,
        $issue_iid,
        $award_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/award_emoji/:award_id> and returns the decoded response content.

=item merge_request_award_emoji

    my $award_emoji = $api->merge_request_award_emoji(
        $project_id,
        $merge_request_iid,
        $award_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/award_emoji/:award_id> and returns the decoded response content.

=item snippet_award_emoji

    my $award_emoji = $api->snippet_award_emoji(
        $project_id,
        $snippet_id,
        $award_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/award_emoji/:award_id> and returns the decoded response content.

=item create_issue_award_emoji

    my $award_emoji = $api->create_issue_award_emoji(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/award_emoji> and returns the decoded response content.

=item create_merge_request_award_emoji

    my $award_emoji = $api->create_merge_request_award_emoji(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/award_emoji> and returns the decoded response content.

=item create_snippet_award_emoji

    my $award_emoji = $api->create_snippet_award_emoji(
        $project_id,
        $snippet_id,
    );

Sends a C<POST> request to C<projects/:project_id/snippets/:snippet_id/award_emoji> and returns the decoded response content.

=item delete_issue_award_emoji

    my $award_emoji = $api->delete_issue_award_emoji(
        $project_id,
        $issue_id,
        $award_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/issues/:issue_id/award_emoji/:award_id> and returns the decoded response content.

=item delete_merge_request_award_emoji

    my $award_emoji = $api->delete_merge_request_award_emoji(
        $project_id,
        $merge_request_id,
        $award_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/merge_requests/:merge_request_id/award_emoji/:award_id> and returns the decoded response content.

=item delete_snippet_award_emoji

    my $award_emoji = $api->delete_snippet_award_emoji(
        $project_id,
        $snippet_id,
        $award_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/snippets/:snippet_id/award_emoji/:award_id> and returns the decoded response content.

=item issue_note_award_emojis

    my $award_emojis = $api->issue_note_award_emojis(
        $project_id,
        $issue_iid,
        $note_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id/award_emoji> and returns the decoded response content.

=item issue_note_award_emoji

    my $award_emoji = $api->issue_note_award_emoji(
        $project_id,
        $issue_iid,
        $note_id,
        $award_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id> and returns the decoded response content.

=item create_issue_note_award_emoji

    my $award_emoji = $api->create_issue_note_award_emoji(
        $project_id,
        $issue_iid,
        $note_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id/award_emoji> and returns the decoded response content.

=item delete_issue_note_award_emoji

    my $award_emoji = $api->delete_issue_note_award_emoji(
        $project_id,
        $issue_iid,
        $note_id,
        $award_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id> and returns the decoded response content.

=item merge_request_note_award_emojis

    my $award_emojis = $api->merge_request_note_award_emojis(
        $project_id,
        $merge_request_iid,
        $note_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id/award_emoji> and returns the decoded response content.

=item merge_request_note_award_emoji

    my $award_emoji = $api->merge_request_note_award_emoji(
        $project_id,
        $merge_request_iid,
        $note_id,
        $award_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id/award_emoji/:award_id> and returns the decoded response content.

=item create_merge_request_note_award_emoji

    my $award_emoji = $api->create_merge_request_note_award_emoji(
        $project_id,
        $merge_request_iid,
        $note_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id/award_emoji> and returns the decoded response content.

=item delete_merge_request_note_award_emoji

    my $award_emoji = $api->delete_merge_request_note_award_emoji(
        $project_id,
        $merge_request_iid,
        $note_id,
        $award_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id/award_emoji/:award_id> and returns the decoded response content.

=back

=head2 Branches

See L<https://docs.gitlab.com/ce/api/branches.html>.

=over

=item branches

    my $branches = $api->branches(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/branches> and returns the decoded response content.

=item branch

    my $branch = $api->branch(
        $project_id,
        $branch_name,
    );

Sends a C<GET> request to C<projects/:project_id/repository/branches/:branch_name> and returns the decoded response content.

=item create_branch

    my $branch = $api->create_branch(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/branches> and returns the decoded response content.

=item delete_branch

    $api->delete_branch(
        $project_id,
        $branch_name,
    );

Sends a C<DELETE> request to C<projects/:project_id/repository/branches/:branch_name>.

=item delete_merged_branches

    $api->delete_merged_branches(
        $project_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/repository/merged_branches>.

=back

=head2 Broadcast Messages

See L<https://docs.gitlab.com/ce/api/broadcast_messages.html>.

=over

=item broadcast_messages

    my $messages = $api->broadcast_messages(
        \%params,
    );

Sends a C<GET> request to C<broadcast_messages> and returns the decoded response content.

=item broadcast_message

    my $message = $api->broadcast_message(
        $message_id,
    );

Sends a C<GET> request to C<broadcast_messages/:message_id> and returns the decoded response content.

=item create_broadcast_message

    my $message = $api->create_broadcast_message(
        \%params,
    );

Sends a C<POST> request to C<broadcast_messages> and returns the decoded response content.

=item edit_broadcast_message

    my $message = $api->edit_broadcast_message(
        $message_id,
        \%params,
    );

Sends a C<PUT> request to C<broadcast_messages/:message_id> and returns the decoded response content.

=item delete_broadcast_message

    $api->delete_broadcast_message(
        $message_id,
    );

Sends a C<DELETE> request to C<broadcast_messages/:message_id>.

=back

=head2 Project-level Variables

See L<https://docs.gitlab.com/ce/api/project_level_variables.html>.

=over

=item project_variables

    my $variables = $api->project_variables(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/variables> and returns the decoded response content.

=item project_variable

    my $variable = $api->project_variable(
        $project_id,
        $variable_key,
    );

Sends a C<GET> request to C<projects/:project_id/variables/:variable_key> and returns the decoded response content.

=item create_project_variable

    my $variable = $api->create_project_variable(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/variables> and returns the decoded response content.

=item edit_project_variable

    my $variable = $api->edit_project_variable(
        $project_id,
        $variable_key,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/variables/:variable_key> and returns the decoded response content.

=item delete_project_variable

    $api->delete_project_variable(
        $project_id,
        $variable_key,
    );

Sends a C<DELETE> request to C<projects/:project_id/variables/:variable_key>.

=back

=head2 Group-level Variables

See L<https://docs.gitlab.com/ce/api/group_level_variables.html>.

=over

=item group_variables

    my $variables = $api->group_variables(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/variables> and returns the decoded response content.

=item group_variable

    my $variable = $api->group_variable(
        $group_id,
        $variable_key,
    );

Sends a C<GET> request to C<groups/:group_id/variables/:variable_key> and returns the decoded response content.

=item create_group_variable

    my $variable = $api->create_group_variable(
        $group_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/variables> and returns the decoded response content.

=item edit_group_variable

    my $variable = $api->edit_group_variable(
        $group_id,
        $variable_key,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/variables/:variable_key> and returns the decoded response content.

=item delete_group_variable

    $api->delete_group_variable(
        $group_id,
        $variable_key,
    );

Sends a C<DELETE> request to C<groups/:group_id/variables/:variable_key>.

=back

=head2 Snippets

See L<https://docs.gitlab.com/ce/api/snippets.html>.

=over

=item snippets

    my $snippets = $api->snippets();

Sends a C<GET> request to C<snippets> and returns the decoded response content.

=item snippet

    my $snippet = $api->snippet(
        $snippet_id,
    );

Sends a C<GET> request to C<snippets/:snippet_id> and returns the decoded response content.

=item create_snippet

    my $snippet = $api->create_snippet(
        \%params,
    );

Sends a C<POST> request to C<snippets> and returns the decoded response content.

=item edit_snippet

    my $snippet = $api->edit_snippet(
        $snippet_id,
        \%params,
    );

Sends a C<PUT> request to C<snippets/:snippet_id> and returns the decoded response content.

=item delete_snippet

    $api->delete_snippet(
        $snippet_id,
    );

Sends a C<DELETE> request to C<snippets/:snippet_id>.

=item public_snippets

    my $snippets = $api->public_snippets(
        \%params,
    );

Sends a C<GET> request to C<snippets/public> and returns the decoded response content.

=item snippet_user_agent_detail

    my $user_agent = $api->snippet_user_agent_detail(
        $snippet_id,
    );

Sends a C<GET> request to C<snippets/:snippet_id/user_agent_detail> and returns the decoded response content.

=back

=head2 Commits

See L<https://docs.gitlab.com/ce/api/commits.html>.

=over

=item commits

    my $commits = $api->commits(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/commits> and returns the decoded response content.

=item create_commit

    my $commit = $api->create_commit(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/commits> and returns the decoded response content.

=item commit

    my $commit = $api->commit(
        $project_id,
        $commit_sha,
    );

Sends a C<GET> request to C<projects/:project_id/repository/commits/:commit_sha> and returns the decoded response content.

=item cherry_pick_commit

    my $commit = $api->cherry_pick_commit(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/commits/:commit_sha/cherry_pick> and returns the decoded response content.

=item commit_diff

    my $diff = $api->commit_diff(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/commits/:commit_sha/diff> and returns the decoded response content.

=item commit_comments

    my $comments = $api->commit_comments(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/commits/:commit_sha/comments> and returns the decoded response content.

=item create_commit_comment

    $api->create_commit_comment(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/commits/:commit_sha/comments>.

=item commit_statuses

    my $build_statuses = $api->commit_statuses(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/commits/:commit_sha/statuses> and returns the decoded response content.

=item create_commit_status

    my $build_status = $api->create_commit_status(
        $project_id,
        $commit_sha,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/statuses/:commit_sha> and returns the decoded response content.

=back

=head2 Custom Attributes

See L<https://docs.gitlab.com/ce/api/custom_attributes.html>.

=over

=item custom_user_attributes

    my $attributes = $api->custom_user_attributes(
        $user_id,
    );

Sends a C<GET> request to C<users/:user_id/custom_attributes> and returns the decoded response content.

=item custom_group_attributes

    my $attributes = $api->custom_group_attributes(
        $group_id,
    );

Sends a C<GET> request to C<groups/:group_id/custom_attributes> and returns the decoded response content.

=item custom_project_attributes

    my $attributes = $api->custom_project_attributes(
        $project_id,
    );

Sends a C<GET> request to C<projects/:project_id/custom_attributes> and returns the decoded response content.

=item custom_user_attribute

    my $attribute = $api->custom_user_attribute(
        $user_id,
        $attribute_key,
    );

Sends a C<GET> request to C<users/:user_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item custom_group_attribute

    my $attribute = $api->custom_group_attribute(
        $group_id,
        $attribute_key,
    );

Sends a C<GET> request to C<groups/:group_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item custom_project_attribute

    my $attribute = $api->custom_project_attribute(
        $project_id,
        $attribute_key,
    );

Sends a C<GET> request to C<projects/:project_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item set_custom_user_attribute

    my $attribute = $api->set_custom_user_attribute(
        $user_id,
        $attribute_key,
        \%params,
    );

Sends a C<PUT> request to C<users/:user_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item set_custom_group_attribute

    my $attribute = $api->set_custom_group_attribute(
        $group_id,
        $attribute_key,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item set_custom_project_attribute

    my $attribute = $api->set_custom_project_attribute(
        $project_id,
        $attribute_key,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/custom_attributes/:attribute_key> and returns the decoded response content.

=item delete_custom_user_attribute

    $api->delete_custom_user_attribute(
        $user_id,
        $attribute_key,
    );

Sends a C<DELETE> request to C<users/:user_id/custom_attributes/:attribute_key>.

=item delete_custom_group_attribute

    $api->delete_custom_group_attribute(
        $group_id,
        $attribute_key,
    );

Sends a C<DELETE> request to C<groups/:group_id/custom_attributes/:attribute_key>.

=item delete_custom_project_attribute

    $api->delete_custom_project_attribute(
        $project_id,
        $attribute_key,
    );

Sends a C<DELETE> request to C<projects/:project_id/custom_attributes/:attribute_key>.

=back

=head2 Deployments

See L<https://docs.gitlab.com/ce/api/deployments.html>.

=over

=item deployments

    my $deployments = $api->deployments(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/deployments> and returns the decoded response content.

=item deployment

    my $deployment = $api->deployment(
        $project_id,
        $deployment_id,
    );

Sends a C<GET> request to C<projects/:project_id/deployments/:deployment_id> and returns the decoded response content.

=back

=head2 Deploy Keys

See L<https://docs.gitlab.com/ce/api/deploy_keys.html>.

=over

=item all_deploy_keys

    my $keys = $api->all_deploy_keys(
        \%params,
    );

Sends a C<GET> request to C<deploy_keys> and returns the decoded response content.

=item deploy_keys

    my $keys = $api->deploy_keys(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/deploy_keys> and returns the decoded response content.

=item deploy_key

    my $key = $api->deploy_key(
        $project_id,
        $key_id,
    );

Sends a C<GET> request to C<projects/:project_id/deploy_keys/:key_id> and returns the decoded response content.

=item create_deploy_key

    my $key = $api->create_deploy_key(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/deploy_keys> and returns the decoded response content.

=item delete_deploy_key

    $api->delete_deploy_key(
        $project_id,
        $key_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/deploy_keys/:key_id>.

=item enable_deploy_key

    my $key = $api->enable_deploy_key(
        $project_id,
        $key_id,
    );

Sends a C<POST> request to C<projects/:project_id/deploy_keys/:key_id/enable> and returns the decoded response content.

=back

=head2 Environments

See L<https://docs.gitlab.com/ce/api/environments.html>.

=over

=item environments

    my $environments = $api->environments(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/environments> and returns the decoded response content.

=item create_environment

    my $environment = $api->create_environment(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/environments> and returns the decoded response content.

=item edit_environment

    my $environment = $api->edit_environment(
        $project_id,
        $environments_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/environments/:environments_id> and returns the decoded response content.

=item delete_environment

    $api->delete_environment(
        $project_id,
        $environment_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/environments/:environment_id>.

=item stop_environment

    my $environment = $api->stop_environment(
        $project_id,
        $environment_id,
    );

Sends a C<POST> request to C<projects/:project_id/environments/:environment_id/stop> and returns the decoded response content.

=back

=head2 Events

See L<https://docs.gitlab.com/ce/api/events.html>.

=over

=item all_events

    my $events = $api->all_events(
        \%params,
    );

Sends a C<GET> request to C<events> and returns the decoded response content.

=item user_events

    my $events = $api->user_events(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/events> and returns the decoded response content.

=item project_events

    my $events = $api->project_events(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/events> and returns the decoded response content.

=back

=head2 Feature flags

See L<https://docs.gitlab.com/ce/api/features.html>.

=over

=item features

    my $features = $api->features();

Sends a C<GET> request to C<features> and returns the decoded response content.

=item set_feature

    my $feature = $api->set_feature(
        $name,
        \%params,
    );

Sends a C<POST> request to C<features/:name> and returns the decoded response content.

=back

=head2 Gitignores

See L<https://docs.gitlab.com/ce/api/templates/gitignores.html>.

=over

=item gitignores_templates

    my $templates = $api->gitignores_templates(
        \%params,
    );

Sends a C<GET> request to C<templates/gitignores> and returns the decoded response content.

=item gitignores_template

    my $template = $api->gitignores_template(
        $template_key,
    );

Sends a C<GET> request to C<templates/gitignores/:template_key> and returns the decoded response content.

=back

=head2 GitLab CI YMLs

See L<https://docs.gitlab.com/ce/api/templates/gitlab_ci_ymls.html>.

=over

=item gitlab_ci_ymls_templates

    my $templates = $api->gitlab_ci_ymls_templates(
        \%params,
    );

Sends a C<GET> request to C<templates/gitlab_ci_ymls> and returns the decoded response content.

=item gitlab_ci_ymls_template

    my $template = $api->gitlab_ci_ymls_template(
        $template_key,
    );

Sends a C<GET> request to C<templates/gitlab_ci_ymls/:template_key> and returns the decoded response content.

=back

=head2 Groups

See L<https://docs.gitlab.com/ce/api/groups.html>.

=over

=item groups

    my $groups = $api->groups(
        \%params,
    );

Sends a C<GET> request to C<groups> and returns the decoded response content.

=item group_subgroups

    my $subgroups = $api->group_subgroups(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/subgroups> and returns the decoded response content.

=item group_projects

    my $projects = $api->group_projects(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/projects> and returns the decoded response content.

=item group

    my $group = $api->group(
        $group_id,
    );

Sends a C<GET> request to C<groups/:group_id> and returns the decoded response content.

=item create_group

    $api->create_group(
        \%params,
    );

Sends a C<POST> request to C<groups>.

=item transfer_project_to_group

    $api->transfer_project_to_group(
        $group_id,
        $project_id,
    );

Sends a C<POST> request to C<groups/:group_id/projects/:project_id>.

=item edit_group

    my $group = $api->edit_group(
        $group_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id> and returns the decoded response content.

=item delete_group

    $api->delete_group(
        $group_id,
    );

Sends a C<DELETE> request to C<groups/:group_id>.

=item sync_group_with_ldap

    $api->sync_group_with_ldap(
        $group_id,
    );

Sends a C<POST> request to C<groups/:group_id/ldap_sync>.

=item create_ldap_group_link

    $api->create_ldap_group_link(
        $group_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/ldap_group_links>.

=item delete_ldap_group_link

    $api->delete_ldap_group_link(
        $group_id,
        $cn,
    );

Sends a C<DELETE> request to C<groups/:group_id/ldap_group_links/:cn>.

=item delete_ldap_provider_group_link

    $api->delete_ldap_provider_group_link(
        $group_id,
        $provider,
        $cn,
    );

Sends a C<DELETE> request to C<groups/:group_id/ldap_group_links/:provider/:cn>.

=back

=head2 Group access requests

See L<https://docs.gitlab.com/ce/api/access_requests.html>.

=over

=item group_access_requests

    my $requests = $api->group_access_requests(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/access_requests> and returns the decoded response content.

=item request_group_access

    my $request = $api->request_group_access(
        $group_id,
    );

Sends a C<POST> request to C<groups/:group_id/access_requests> and returns the decoded response content.

=item approve_group_access

    my $request = $api->approve_group_access(
        $group_id,
        $user_id,
    );

Sends a C<PUT> request to C<groups/:group_id/access_requests/:user_id/approve> and returns the decoded response content.

=item deny_group_access

    $api->deny_group_access(
        $group_id,
        $user_id,
    );

Sends a C<DELETE> request to C<groups/:group_id/access_requests/:user_id>.

=back

=head2 Group badges

See L<https://docs.gitlab.com/ce/api/group_badges.html>.

=over

=item group_badges

    my $badges = $api->group_badges(
        $group_id,
    );

Sends a C<GET> request to C<groups/:group_id/badges> and returns the decoded response content.

=item group_badge

    my $badge = $api->group_badge(
        $group_id,
        $badge_id,
    );

Sends a C<GET> request to C<groups/:group_id/badges/:badge_id> and returns the decoded response content.

=item create_group_badge

    my $badge = $api->create_group_badge(
        $group_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/badges> and returns the decoded response content.

=item edit_group_badge

    my $badge = $api->edit_group_badge(
        $group_id,
        $badge_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/badges/:badge_id> and returns the decoded response content.

=item delete_group_badge

    $api->delete_group_badge(
        $group_id,
        $badge_id,
    );

Sends a C<DELETE> request to C<groups/:group_id/badges/:badge_id>.

=item preview_group_badge

    my $preview = $api->preview_group_badge(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/badges/render> and returns the decoded response content.

=back

=head2 Group members

See L<https://docs.gitlab.com/ce/api/members.html>.

=over

=item group_members

    my $members = $api->group_members(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/members> and returns the decoded response content.

=item group_member

    my $member = $api->group_member(
        $project_id,
        $user_id,
    );

Sends a C<GET> request to C<groups/:project_id/members/:user_id> and returns the decoded response content.

=item add_group_member

    my $member = $api->add_group_member(
        $group_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/members> and returns the decoded response content.

=item update_group_member

    my $member = $api->update_group_member(
        $group_id,
        $user_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/members/:user_id> and returns the decoded response content.

=item remove_group_member

    $api->remove_group_member(
        $group_id,
        $user_id,
    );

Sends a C<DELETE> request to C<groups/:group_id/members/:user_id>.

=back

=head2 Issues

See L<https://docs.gitlab.com/ce/api/issues.html>.

=over

=item global_issues

    my $issues = $api->global_issues(
        \%params,
    );

Sends a C<GET> request to C<issues> and returns the decoded response content.

=item group_issues

    my $issues = $api->group_issues(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/issues> and returns the decoded response content.

=item issues

    my $issues = $api->issues(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/issues> and returns the decoded response content.

=item issue

    my $issue = $api->issue(
        $project_id,
        $issue_iid,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid> and returns the decoded response content.

=item create_issue

    my $issue = $api->create_issue(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues> and returns the decoded response content.

=item edit_issue

    my $issue = $api->edit_issue(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/issues/:issue_iid> and returns the decoded response content.

=item delete_issue

    $api->delete_issue(
        $project_id,
        $issue_iid,
    );

Sends a C<DELETE> request to C<projects/:project_id/issues/:issue_iid>.

=item move_issue

    my $issue = $api->move_issue(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/move> and returns the decoded response content.

=item subscribe_to_issue

    my $issue = $api->subscribe_to_issue(
        $project_id,
        $issue_iid,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/subscribe> and returns the decoded response content.

=item unsubscribe_from_issue

    my $issue = $api->unsubscribe_from_issue(
        $project_id,
        $issue_iid,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/unsubscribe> and returns the decoded response content.

=item create_issue_todo

    my $todo = $api->create_issue_todo(
        $project_id,
        $issue_iid,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/todo> and returns the decoded response content.

=item set_issue_time_estimate

    my $tracking = $api->set_issue_time_estimate(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/time_estimate> and returns the decoded response content.

=item reset_issue_time_estimate

    my $tracking = $api->reset_issue_time_estimate(
        $project_id,
        $issue_iid,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/reset_time_estimate> and returns the decoded response content.

=item add_issue_spent_time

    my $tracking = $api->add_issue_spent_time(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/add_spent_time> and returns the decoded response content.

=item reset_issue_spent_time

    my $tracking = $api->reset_issue_spent_time(
        $project_id,
        $issue_iid,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/reset_spent_time> and returns the decoded response content.

=item issue_time_stats

    my $tracking = $api->issue_time_stats(
        $project_id,
        $issue_iid,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/time_stats> and returns the decoded response content.

=item issue_closed_by

    my $merge_requests = $api->issue_closed_by(
        $project_id,
        $issue_iid,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/closed_by> and returns the decoded response content.

=item issue_user_agent_detail

    my $user_agent = $api->issue_user_agent_detail(
        $project_id,
        $issue_iid,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/user_agent_detail> and returns the decoded response content.

=back

=head2 Issue Boards

See L<https://docs.gitlab.com/ce/api/boards.html>.

=over

=item project_boards

    my $boards = $api->project_boards(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/boards> and returns the decoded response content.

=item project_board_lists

    my $lists = $api->project_board_lists(
        $project_id,
        $board_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/boards/:board_id/lists> and returns the decoded response content.

=item project_board_list

    my $list = $api->project_board_list(
        $project_id,
        $board_id,
        $list_id,
    );

Sends a C<GET> request to C<projects/:project_id/boards/:board_id/lists/:list_id> and returns the decoded response content.

=item create_project_board_list

    my $list = $api->create_project_board_list(
        $project_id,
        $board_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/boards/:board_id/lists> and returns the decoded response content.

=item edit_project_board_list

    my $list = $api->edit_project_board_list(
        $project_id,
        $board_id,
        $list_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/boards/:board_id/lists/:list_id> and returns the decoded response content.

=item delete_project_board_list

    $api->delete_project_board_list(
        $project_id,
        $board_id,
        $list_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/boards/:board_id/lists/:list_id>.

=back

=head2 Group Issue Boards

See L<https://docs.gitlab.com/ce/api/group_boards.html>.

=over

=item group_boards

    my $boards = $api->group_boards(
        $group_id,
    );

Sends a C<GET> request to C<groups/:group_id/boards> and returns the decoded response content.

=item group_board

    my $board = $api->group_board(
        $group_id,
        $board_id,
    );

Sends a C<GET> request to C<groups/:group_id/boards/:board_id> and returns the decoded response content.

=item group_board_lists

    my $lists = $api->group_board_lists(
        $group_id,
        $board_id,
    );

Sends a C<GET> request to C<groups/:group_id/boards/:board_id/lists> and returns the decoded response content.

=item group_board_list

    my $list = $api->group_board_list(
        $group_id,
        $board_id,
        $list_id,
    );

Sends a C<GET> request to C<groups/:group_id/boards/:board_id/lists/:list_id> and returns the decoded response content.

=item create_group_board_list

    my $list = $api->create_group_board_list(
        $group_id,
        $board_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/boards/:board_id/lists> and returns the decoded response content.

=item edit_group_board_list

    my $list = $api->edit_group_board_list(
        $group_id,
        $board_id,
        $list_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/boards/:board_id/lists/:list_id> and returns the decoded response content.

=item delete_group_board_list

    $api->delete_group_board_list(
        $group_id,
        $board_id,
        $list_id,
    );

Sends a C<DELETE> request to C<groups/:group_id/boards/:board_id/lists/:list_id>.

=back

=head2 Jobs

See L<https://docs.gitlab.com/ce/api/jobs.html>.

=over

=item jobs

    my $jobs = $api->jobs(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/jobs> and returns the decoded response content.

=item pipeline_jobs

    my $jobs = $api->pipeline_jobs(
        $project_id,
        $pipeline_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/pipelines/:pipeline_id/jobs> and returns the decoded response content.

=item job

    my $job = $api->job(
        $project_id,
        $job_id,
    );

Sends a C<GET> request to C<projects/:project_id/jobs/:job_id> and returns the decoded response content.

=item job_artifacts

    my $artifacts = $api->job_artifacts(
        $project_id,
        $job_id,
    );

Sends a C<GET> request to C<projects/:project_id/jobs/:job_id/artifacts> and returns the decoded response content.

=item job_artifacts_archive

    my $archive = $api->job_artifacts_archive(
        $project_id,
        $ref_name,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/jobs/artifacts/:ref_name/download> and returns the decoded response content.

=item job_artifacts_file

    my $file = $api->job_artifacts_file(
        $project_id,
        $job_id,
        $artifact_path,
    );

Sends a C<GET> request to C<projects/:project_id/jobs/:job_id/artifacts/:artifact_path> and returns the decoded response content.

=item job_trace_file

    my $file = $api->job_trace_file(
        $project_id,
        $job_id,
    );

Sends a C<GET> request to C<projects/:project_id/jobs/:job_id/trace> and returns the decoded response content.

=item cancel_job

    my $job = $api->cancel_job(
        $project_id,
        $job_id,
    );

Sends a C<POST> request to C<projects/:project_id/jobs/:job_id/cancel> and returns the decoded response content.

=item retry_job

    my $job = $api->retry_job(
        $project_id,
        $job_id,
    );

Sends a C<POST> request to C<projects/:project_id/jobs/:job_id/retry> and returns the decoded response content.

=item erase_job

    my $job = $api->erase_job(
        $project_id,
        $job_id,
    );

Sends a C<POST> request to C<projects/:project_id/jobs/:job_id/erase> and returns the decoded response content.

=item keep_job_artifacts

    my $job = $api->keep_job_artifacts(
        $project_id,
        $job_id,
    );

Sends a C<POST> request to C<projects/:project_id/jobs/:job_id/artifacts/keep> and returns the decoded response content.

=item play_job

    my $job = $api->play_job(
        $project_id,
        $job_id,
    );

Sends a C<POST> request to C<projects/:project_id/jobs/:job_id/play> and returns the decoded response content.

=back

=head2 Keys

See L<https://docs.gitlab.com/ce/api/keys.html>.

=over

=item key

    my $key = $api->key(
        $key_id,
    );

Sends a C<GET> request to C<keys/:key_id> and returns the decoded response content.

=back

=head2 Labels

See L<https://docs.gitlab.com/ce/api/labels.html>.

=over

=item labels

    my $labels = $api->labels(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/labels> and returns the decoded response content.

=item create_label

    my $label = $api->create_label(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/labels> and returns the decoded response content.

=item delete_label

    $api->delete_label(
        $project_id,
        \%params,
    );

Sends a C<DELETE> request to C<projects/:project_id/labels>.

=item edit_label

    my $label = $api->edit_label(
        $project_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/labels> and returns the decoded response content.

=item subscribe_to_label

    my $label = $api->subscribe_to_label(
        $project_id,
        $label_id,
    );

Sends a C<POST> request to C<projects/:project_id/labels/:label_id/subscribe> and returns the decoded response content.

=item unsubscribe_from_label

    $api->unsubscribe_from_label(
        $project_id,
        $label_id,
    );

Sends a C<POST> request to C<projects/:project_id/labels/:label_id/unsubscribe>.

=back

=head2 Markdown

See L<https://docs.gitlab.com/ce/api/markdown.html>.

=over

=item markdown

    my $html = $api->markdown(
        \%params,
    );

Sends a C<POST> request to C<markdown> and returns the decoded response content.

=back

=head2 Merge requests

See L<https://docs.gitlab.com/ce/api/merge_requests.html>.

=over

=item global_merge_requests

    my $merge_requests = $api->global_merge_requests(
        \%params,
    );

Sends a C<GET> request to C<merge_requests> and returns the decoded response content.

=item merge_requests

    my $merge_requests = $api->merge_requests(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests> and returns the decoded response content.

=item merge_request

    my $merge_request = $api->merge_request(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid> and returns the decoded response content.

=item merge_request_commits

    my $commits = $api->merge_request_commits(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/commits> and returns the decoded response content.

=item merge_request_with_changes

    my $merge_request = $api->merge_request_with_changes(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/changes> and returns the decoded response content.

=item create_merge_request

    my $merge_request = $api->create_merge_request(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests> and returns the decoded response content.

=item edit_merge_request

    my $merge_request = $api->edit_merge_request(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid> and returns the decoded response content.

=item delete_merge_request

    $api->delete_merge_request(
        $project_id,
        $merge_request_iid,
    );

Sends a C<DELETE> request to C<projects/:project_id/merge_requests/:merge_request_iid>.

=item accept_merge_request

    my $merge_request = $api->accept_merge_request(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid/merge> and returns the decoded response content.

=item cancel_merge_when_pipeline_succeeds

    my $merge_request = $api->cancel_merge_when_pipeline_succeeds(
        $project_id,
        $merge_request_iid,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds> and returns the decoded response content.

=item merge_request_closes_issues

    my $issues = $api->merge_request_closes_issues(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/closes_issues> and returns the decoded response content.

=item subscribe_to_merge_request

    my $merge_request = $api->subscribe_to_merge_request(
        $project_id,
        $merge_request_iid,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/subscribe> and returns the decoded response content.

=item unsubscribe_from_merge_request

    my $merge_request = $api->unsubscribe_from_merge_request(
        $project_id,
        $merge_request_iid,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/unsubscribe> and returns the decoded response content.

=item create_merge_request_todo

    my $todo = $api->create_merge_request_todo(
        $project_id,
        $merge_request_iid,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/todo> and returns the decoded response content.

=item merge_request_diff_versions

    my $versions = $api->merge_request_diff_versions(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/versions> and returns the decoded response content.

=item merge_request_diff_version

    my $version = $api->merge_request_diff_version(
        $project_id,
        $merge_request_iid,
        $version_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/versions/:version_id> and returns the decoded response content.

=item set_merge_request_time_estimate

    my $tracking = $api->set_merge_request_time_estimate(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/time_estimate> and returns the decoded response content.

=item reset_merge_request_time_estimate

    my $tracking = $api->reset_merge_request_time_estimate(
        $project_id,
        $merge_request_iid,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/reset_time_estimate> and returns the decoded response content.

=item add_merge_request_spent_time

    my $tracking = $api->add_merge_request_spent_time(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/add_spent_time> and returns the decoded response content.

=item reset_merge_request_spent_time

    my $tracking = $api->reset_merge_request_spent_time(
        $project_id,
        $merge_request_iid,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/reset_spent_time> and returns the decoded response content.

=item merge_request_time_stats

    my $tracking = $api->merge_request_time_stats(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/time_stats> and returns the decoded response content.

=back

=head2 Milestones

See L<https://docs.gitlab.com/ce/api/milestones.html>.

=over

=item project_milestones

    my $milestones = $api->project_milestones(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/milestones> and returns the decoded response content.

=item project_milestone

    my $milestone = $api->project_milestone(
        $project_id,
        $milestone_id,
    );

Sends a C<GET> request to C<projects/:project_id/milestones/:milestone_id> and returns the decoded response content.

=item create_project_milestone

    my $milestone = $api->create_project_milestone(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/milestones> and returns the decoded response content.

=item edit_project_milestone

    my $milestone = $api->edit_project_milestone(
        $project_id,
        $milestone_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/milestones/:milestone_id> and returns the decoded response content.

=item project_milestone_issues

    my $issues = $api->project_milestone_issues(
        $project_id,
        $milestone_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/milestones/:milestone_id/issues> and returns the decoded response content.

=item project_milestone_merge_requests

    my $merge_requests = $api->project_milestone_merge_requests(
        $project_id,
        $milestone_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/milestones/:milestone_id/merge_requests> and returns the decoded response content.

=back

=head2 Group milestones

See L<https://docs.gitlab.com/ce/api/group_milestones.html>.

=over

=item group_milestones

    my $milestones = $api->group_milestones(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/milestones> and returns the decoded response content.

=item group_milestone

    my $milestone = $api->group_milestone(
        $group_id,
        $milestone_id,
    );

Sends a C<GET> request to C<groups/:group_id/milestones/:milestone_id> and returns the decoded response content.

=item create_group_milestone

    my $milestone = $api->create_group_milestone(
        $group_id,
        \%params,
    );

Sends a C<POST> request to C<groups/:group_id/milestones> and returns the decoded response content.

=item edit_group_milestone

    my $milestone = $api->edit_group_milestone(
        $group_id,
        $milestone_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/milestones/:milestone_id> and returns the decoded response content.

=item group_milestone_issues

    my $issues = $api->group_milestone_issues(
        $group_id,
        $milestone_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/milestones/:milestone_id/issues> and returns the decoded response content.

=item group_milestone_merge_requests

    my $merge_requests = $api->group_milestone_merge_requests(
        $group_id,
        $milestone_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/milestones/:milestone_id/merge_requests> and returns the decoded response content.

=back

=head2 Namespaces

See L<https://docs.gitlab.com/ce/api/namespaces.html>.

=over

=item namespaces

    my $namespaces = $api->namespaces(
        \%params,
    );

Sends a C<GET> request to C<namespaces> and returns the decoded response content.

=item namespace

    my $namespace = $api->namespace(
        $namespace_id,
    );

Sends a C<GET> request to C<namespaces/:namespace_id> and returns the decoded response content.

=back

=head2 Notes

See L<https://docs.gitlab.com/ce/api/notes.html>.

=over

=item issue_notes

    my $notes = $api->issue_notes(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/notes> and returns the decoded response content.

=item issue_note

    my $note = $api->issue_note(
        $project_id,
        $issue_iid,
        $note_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id> and returns the decoded response content.

=item create_issue_note

    my $note = $api->create_issue_note(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/notes> and returns the decoded response content.

=item edit_issue_note

    $api->edit_issue_note(
        $project_id,
        $issue_iid,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id>.

=item delete_issue_note

    $api->delete_issue_note(
        $project_id,
        $issue_iid,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/issues/:issue_iid/notes/:note_id>.

=item snippet_notes

    my $notes = $api->snippet_notes(
        $project_id,
        $snippet_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/notes> and returns the decoded response content.

=item snippet_note

    my $note = $api->snippet_note(
        $project_id,
        $snippet_id,
        $note_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/notes/:note_id> and returns the decoded response content.

=item create_snippet_note

    my $note = $api->create_snippet_note(
        $project_id,
        $snippet_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/snippets/:snippet_id/notes> and returns the decoded response content.

=item edit_snippet_note

    $api->edit_snippet_note(
        $project_id,
        $snippet_id,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/snippets/:snippet_id/notes/:note_id>.

=item delete_snippet_note

    $api->delete_snippet_note(
        $project_id,
        $snippet_id,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/snippets/:snippet_id/notes/:note_id>.

=item merge_request_notes

    my $notes = $api->merge_request_notes(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes> and returns the decoded response content.

=item merge_request_note

    my $note = $api->merge_request_note(
        $project_id,
        $merge_request_iid,
        $note_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id> and returns the decoded response content.

=item create_merge_request_note

    my $note = $api->create_merge_request_note(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes> and returns the decoded response content.

=item edit_merge_request_note

    $api->edit_merge_request_note(
        $project_id,
        $merge_request_iid,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id>.

=item delete_merge_request_note

    $api->delete_merge_request_note(
        $project_id,
        $merge_request_iid,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/merge_requests/:merge_request_iid/notes/:note_id>.

=back

=head2 Discussions

See L<https://docs.gitlab.com/ce/api/discussions.html>.

=over

=item issue_discussions

    my $discussions = $api->issue_discussions(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/discussions> and returns the decoded response content.

=item issue_discussion

    my $discussion = $api->issue_discussion(
        $project_id,
        $issue_iid,
        $discussion_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/discussions/:discussion_id> and returns the decoded response content.

=item create_issue_discussion

    my $discussion = $api->create_issue_discussion(
        $project_id,
        $issue_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/discussions> and returns the decoded response content.

=item create_issue_discussion_note

    $api->create_issue_discussion_note(
        $project_id,
        $issue_iid,
        $discussion_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/issues/:issue_iid/discussions/:discussion_id/notes>.

=item edit_issue_discussion_note

    $api->edit_issue_discussion_note(
        $project_id,
        $issue_iid,
        $discussion_id,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id>.

=item delete_issue_discussion_note

    $api->delete_issue_discussion_note(
        $project_id,
        $issue_iid,
        $discussion_id,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id>.

=item project_snippet_discussions

    my $discussions = $api->project_snippet_discussions(
        $project_id,
        $snippet_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/discussions> and returns the decoded response content.

=item project_snippet_discussion

    my $discussion = $api->project_snippet_discussion(
        $project_id,
        $snippet_id,
        $discussion_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/discussions/:discussion_id> and returns the decoded response content.

=item create_project_snippet_discussion

    my $discussion = $api->create_project_snippet_discussion(
        $project_id,
        $snippet_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/snippets/:snippet_id/discussions> and returns the decoded response content.

=item create_project_snippet_discussion_note

    $api->create_project_snippet_discussion_note(
        $project_id,
        $snippet_id,
        $discussion_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/snippets/:snippet_id/discussions/:discussion_id/notes>.

=item edit_project_snippet_discussion_note

    $api->edit_project_snippet_discussion_note(
        $project_id,
        $snippet_id,
        $discussion_id,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id>.

=item delete_project_snippet_discussion_note

    $api->delete_project_snippet_discussion_note(
        $project_id,
        $snippet_id,
        $discussion_id,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id>.

=item merge_request_discussions

    my $discussions = $api->merge_request_discussions(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions> and returns the decoded response content.

=item merge_request_discussion

    my $discussion = $api->merge_request_discussion(
        $project_id,
        $merge_request_iid,
        $discussion_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions/:discussion_id> and returns the decoded response content.

=item create_merge_request_discussion

    my $discussion = $api->create_merge_request_discussion(
        $project_id,
        $merge_request_iid,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions> and returns the decoded response content.

=item resolve_merge_request_discussion

    $api->resolve_merge_request_discussion(
        $project_id,
        $merge_request_iid,
        $discussion_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions/:discussion_id>.

=item create_merge_request_discussion_note

    $api->create_merge_request_discussion_note(
        $project_id,
        $merge_request_iid,
        $discussion_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes>.

=item edit_merge_request_discussion_note

    $api->edit_merge_request_discussion_note(
        $project_id,
        $merge_request_iid,
        $discussion_id,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id>.

=item delete_merge_request_discussion_note

    $api->delete_merge_request_discussion_note(
        $project_id,
        $merge_request_iid,
        $discussion_id,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id>.

=item commit_discussions

    my $discussions = $api->commit_discussions(
        $project_id,
        $commit_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/commits/:commit_id/discussions> and returns the decoded response content.

=item commit_discussion

    my $discussion = $api->commit_discussion(
        $project_id,
        $commit_id,
        $discussion_id,
    );

Sends a C<GET> request to C<projects/:project_id/commits/:commit_id/discussions/:discussion_id> and returns the decoded response content.

=item create_commit_discussion

    my $discussion = $api->create_commit_discussion(
        $project_id,
        $commit_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/commits/:commit_id/discussions> and returns the decoded response content.

=item create_commit_discussion_note

    $api->create_commit_discussion_note(
        $project_id,
        $commit_id,
        $discussion_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/commits/:commit_id/discussions/:discussion_id/notes>.

=item edit_commit_discussion_note

    $api->edit_commit_discussion_note(
        $project_id,
        $commit_id,
        $discussion_id,
        $note_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/commits/:commit_id/discussions/:discussion_id/notes/:note_id>.

=item delete_commit_discussion_note

    $api->delete_commit_discussion_note(
        $project_id,
        $commit_id,
        $discussion_id,
        $note_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/commits/:commit_id/discussions/:discussion_id/notes/:note_id>.

=back

=head2 Resource label events

See L<https://docs.gitlab.com/ce/api/resource_label_events.html>.

=over

=item issue_resource_label_events

    my $events = $api->issue_resource_label_events(
        $project_id,
        $issue_iid,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/resource_label_events> and returns the decoded response content.

=item issue_resource_label_event

    my $event = $api->issue_resource_label_event(
        $project_id,
        $issue_iid,
        $resource_label_event_id,
    );

Sends a C<GET> request to C<projects/:project_id/issues/:issue_iid/resource_label_events/:resource_label_event_id> and returns the decoded response content.

=item merge_request_resource_label_events

    my $events = $api->merge_request_resource_label_events(
        $project_id,
        $merge_request_iid,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/resource_label_events> and returns the decoded response content.

=item merge_request_resource_label_event

    my $event = $api->merge_request_resource_label_event(
        $project_id,
        $merge_request_iid,
        $resource_label_event_id,
    );

Sends a C<GET> request to C<projects/:project_id/merge_requests/:merge_request_iid/resource_label_events/:resource_label_event_id> and returns the decoded response content.

=back

=head2 Notification settings

See L<https://docs.gitlab.com/ce/api/notification_settings.html>.

=over

=item global_notification_settings

    my $settings = $api->global_notification_settings();

Sends a C<GET> request to C<notification_settings> and returns the decoded response content.

=item set_global_notification_settings

    my $settings = $api->set_global_notification_settings(
        \%params,
    );

Sends a C<PUT> request to C<notification_settings> and returns the decoded response content.

=item group_notification_settings

    my $settings = $api->group_notification_settings(
        $group_id,
    );

Sends a C<GET> request to C<groups/:group_id/notification_settings> and returns the decoded response content.

=item project_notification_settings

    my $settings = $api->project_notification_settings(
        $project_id,
    );

Sends a C<GET> request to C<projects/:project_id/notification_settings> and returns the decoded response content.

=item set_group_notification_settings

    my $settings = $api->set_group_notification_settings(
        $group_id,
        \%params,
    );

Sends a C<PUT> request to C<groups/:group_id/notification_settings> and returns the decoded response content.

=item set_project_notification_settings

    my $settings = $api->set_project_notification_settings(
        $project_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/notification_settings> and returns the decoded response content.

=back

=head2 Licenses

See L<https://docs.gitlab.com/ce/api/templates/licenses.html>.

=over

=item license_templates

    my $templates = $api->license_templates(
        \%params,
    );

Sends a C<GET> request to C<templates/licenses> and returns the decoded response content.

=item license_template

    my $template = $api->license_template(
        $template_key,
        \%params,
    );

Sends a C<GET> request to C<templates/licenses/:template_key> and returns the decoded response content.

=back

=head2 Pages domains

See L<https://docs.gitlab.com/ce/api/pages_domains.html>.

=over

=item global_pages_domains

    my $domains = $api->global_pages_domains(
        \%params,
    );

Sends a C<GET> request to C<pages/domains> and returns the decoded response content.

=item pages_domains

    my $domains = $api->pages_domains(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/pages/domains> and returns the decoded response content.

=item pages_domain

    my $domain = $api->pages_domain(
        $project_id,
        $domain,
    );

Sends a C<GET> request to C<projects/:project_id/pages/domains/:domain> and returns the decoded response content.

=item create_pages_domain

    my $domain = $api->create_pages_domain(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/pages/domains> and returns the decoded response content.

=item edit_pages_domain

    my $domain = $api->edit_pages_domain(
        $project_id,
        $domain,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/pages/domains/:domain> and returns the decoded response content.

=item delete_pages_domain

    $api->delete_pages_domain(
        $project_id,
        $domain,
    );

Sends a C<DELETE> request to C<projects/:project_id/pages/domains/:domain>.

=back

=head2 Pipelines

See L<https://docs.gitlab.com/ce/api/pipelines.html>.

=over

=item pipelines

    my $pipelines = $api->pipelines(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/pipelines> and returns the decoded response content.

=item pipeline

    my $pipeline = $api->pipeline(
        $project_id,
        $pipeline_id,
    );

Sends a C<GET> request to C<projects/:project_id/pipelines/:pipeline_id> and returns the decoded response content.

=item create_pipeline

    my $pipeline = $api->create_pipeline(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/pipeline> and returns the decoded response content.

=item retry_pipeline_jobs

    my $pipeline = $api->retry_pipeline_jobs(
        $project_id,
        $pipeline_id,
    );

Sends a C<POST> request to C<projects/:project_id/pipelines/:pipeline_id/retry> and returns the decoded response content.

=item cancel_pipeline_jobs

    my $pipeline = $api->cancel_pipeline_jobs(
        $project_id,
        $pipeline_id,
    );

Sends a C<POST> request to C<projects/:project_id/pipelines/:pipeline_id/cancel> and returns the decoded response content.

=back

=head2 Pipeline triggers

See L<https://docs.gitlab.com/ce/api/pipeline_triggers.html>.

=over

=item triggers

    my $triggers = $api->triggers(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/triggers> and returns the decoded response content.

=item trigger

    my $trigger = $api->trigger(
        $project_id,
        $trigger_id,
    );

Sends a C<GET> request to C<projects/:project_id/triggers/:trigger_id> and returns the decoded response content.

=item create_trigger

    my $trigger = $api->create_trigger(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/triggers> and returns the decoded response content.

=item edit_trigger

    my $trigger = $api->edit_trigger(
        $project_id,
        $trigger_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/triggers/:trigger_id> and returns the decoded response content.

=item take_ownership_of_trigger

    my $trigger = $api->take_ownership_of_trigger(
        $project_id,
        $trigger_id,
    );

Sends a C<POST> request to C<projects/:project_id/triggers/:trigger_id/take_ownership> and returns the decoded response content.

=item delete_trigger

    $api->delete_trigger(
        $project_id,
        $trigger_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/triggers/:trigger_id>.

=back

=head2 Pipeline schedules

See L<https://docs.gitlab.com/ce/api/pipeline_schedules.html>.

=over

=item pipeline_schedules

    my $schedules = $api->pipeline_schedules(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/pipeline_schedules> and returns the decoded response content.

=item pipeline_schedule

    my $schedule = $api->pipeline_schedule(
        $project_id,
        $pipeline_schedule_id,
    );

Sends a C<GET> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id> and returns the decoded response content.

=item create_pipeline_schedule

    my $schedule = $api->create_pipeline_schedule(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/pipeline_schedules> and returns the decoded response content.

=item edit_pipeline_schedule

    my $schedule = $api->edit_pipeline_schedule(
        $project_id,
        $pipeline_schedule_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id> and returns the decoded response content.

=item take_ownership_of_pipeline_schedule

    my $schedule = $api->take_ownership_of_pipeline_schedule(
        $project_id,
        $pipeline_schedule_id,
    );

Sends a C<POST> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id/take_ownership> and returns the decoded response content.

=item delete_pipeline_schedule

    my $schedule = $api->delete_pipeline_schedule(
        $project_id,
        $pipeline_schedule_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id> and returns the decoded response content.

=item create_pipeline_schedule_variable

    my $variable = $api->create_pipeline_schedule_variable(
        $project_id,
        $pipeline_schedule_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id/variables> and returns the decoded response content.

=item edit_pipeline_schedule_variable

    my $variable = $api->edit_pipeline_schedule_variable(
        $project_id,
        $pipeline_schedule_id,
        $variable_key,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id/variables/:variable_key> and returns the decoded response content.

=item delete_pipeline_schedule_variable

    my $variable = $api->delete_pipeline_schedule_variable(
        $project_id,
        $pipeline_schedule_id,
        $variable_key,
    );

Sends a C<DELETE> request to C<projects/:project_id/pipeline_schedules/:pipeline_schedule_id/variables/:variable_key> and returns the decoded response content.

=back

=head2 Projects

See L<https://docs.gitlab.com/ce/api/projects.html>.

=over

=item projects

    my $projects = $api->projects(
        \%params,
    );

Sends a C<GET> request to C<projects> and returns the decoded response content.

=item user_projects

    my $projects = $api->user_projects(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/projects> and returns the decoded response content.

=item project

    my $project = $api->project(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id> and returns the decoded response content.

=item project_users

    my $users = $api->project_users(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/users> and returns the decoded response content.

=item create_project

    my $project = $api->create_project(
        \%params,
    );

Sends a C<POST> request to C<projects> and returns the decoded response content.

=item create_project_for_user

    $api->create_project_for_user(
        $user_id,
        \%params,
    );

Sends a C<POST> request to C<projects/user/:user_id>.

=item edit_project

    $api->edit_project(
        $project_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id>.

=item fork_project

    $api->fork_project(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/fork>.

=item project_forks

    my $forks = $api->project_forks(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/forks> and returns the decoded response content.

=item start_project

    my $project = $api->start_project(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/star> and returns the decoded response content.

=item unstar_project

    my $project = $api->unstar_project(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/unstar> and returns the decoded response content.

=item project_languages

    my $languages = $api->project_languages(
        $project_id,
    );

Sends a C<GET> request to C<projects/:project_id/languages> and returns the decoded response content.

=item archive_project

    my $project = $api->archive_project(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/archive> and returns the decoded response content.

=item unarchive_project

    my $project = $api->unarchive_project(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/unarchive> and returns the decoded response content.

=item delete_project

    $api->delete_project(
        $project_id,
    );

Sends a C<DELETE> request to C<projects/:project_id>.

=item upload_file_to_project

    my $upload = $api->upload_file_to_project(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/uploads> and returns the decoded response content.

The C<file> parameter must point to a readable file on the local filesystem.

=item share_project_with_group

    $api->share_project_with_group(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/share>.

=item unshare_project_with_group

    $api->unshare_project_with_group(
        $project_id,
        $group_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/share/:group_id>.

=item project_hooks

    my $hooks = $api->project_hooks(
        $project_id,
    );

Sends a C<GET> request to C<projects/:project_id/hooks> and returns the decoded response content.

=item project_hook

    my $hook = $api->project_hook(
        $project_id,
        $hook_id,
    );

Sends a C<GET> request to C<projects/:project_id/hooks/:hook_id> and returns the decoded response content.

=item create_project_hook

    my $hook = $api->create_project_hook(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/hooks> and returns the decoded response content.

=item edit_project_hook

    my $hook = $api->edit_project_hook(
        $project_id,
        $hook_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/hooks/:hook_id> and returns the decoded response content.

=item delete_project_hook

    $api->delete_project_hook(
        $project_id,
        $hook_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/hooks/:hook_id>.

=item set_project_fork

    $api->set_project_fork(
        $project_id,
        $from_project_id,
    );

Sends a C<POST> request to C<projects/:project_id/fork/:from_project_id>.

=item clear_project_fork

    $api->clear_project_fork(
        $project_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/fork>.

=item start_housekeeping

    $api->start_housekeeping(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/housekeeping>.

=back

=head2 Project access requests

See L<https://docs.gitlab.com/ce/api/access_requests.html>.

=over

=item group_access_requests

    my $requests = $api->group_access_requests(
        $group_id,
        \%params,
    );

Sends a C<GET> request to C<groups/:group_id/access_requests> and returns the decoded response content.

=item project_access_requests

    my $requests = $api->project_access_requests(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/access_requests> and returns the decoded response content.

=item request_group_access

    my $request = $api->request_group_access(
        $group_id,
    );

Sends a C<POST> request to C<groups/:group_id/access_requests> and returns the decoded response content.

=item request_project_access

    my $request = $api->request_project_access(
        $project_id,
    );

Sends a C<POST> request to C<projects/:project_id/access_requests> and returns the decoded response content.

=item approve_group_access

    my $request = $api->approve_group_access(
        $group_id,
        $user_id,
    );

Sends a C<PUT> request to C<groups/:group_id/access_requests/:user_id/approve> and returns the decoded response content.

=item approve_project_access

    my $request = $api->approve_project_access(
        $project_id,
        $user_id,
    );

Sends a C<PUT> request to C<projects/:project_id/access_requests/:user_id/approve> and returns the decoded response content.

=item deny_group_access

    $api->deny_group_access(
        $group_id,
        $user_id,
    );

Sends a C<DELETE> request to C<groups/:group_id/access_requests/:user_id>.

=item deny_project_access

    $api->deny_project_access(
        $project_id,
        $user_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/access_requests/:user_id>.

=back

=head2 Project members

See L<https://docs.gitlab.com/ce/api/members.html>.

=over

=item project_members

    my $members = $api->project_members(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/members> and returns the decoded response content.

=item project_member

    my $member = $api->project_member(
        $project_id,
        $user_id,
    );

Sends a C<GET> request to C<projects/:project_id/members/:user_id> and returns the decoded response content.

=item add_project_member

    my $member = $api->add_project_member(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/members> and returns the decoded response content.

=item update_project_member

    my $member = $api->update_project_member(
        $project_id,
        $user_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/members/:user_id> and returns the decoded response content.

=item remove_project_member

    $api->remove_project_member(
        $project_id,
        $user_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/members/:user_id>.

=back

=head2 Project snippets

See L<https://docs.gitlab.com/ce/api/project_snippets.html>.

=over

=item project_snippets

    my $snippets = $api->project_snippets(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/snippets> and returns the decoded response content.

=item project_snippet

    my $snippet = $api->project_snippet(
        $project_id,
        $snippet_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id> and returns the decoded response content.

=item create_project_snippet

    $api->create_project_snippet(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/snippets>.

=item edit_project_snippet

    $api->edit_project_snippet(
        $project_id,
        $snippet_id,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/snippets/:snippet_id>.

=item delete_project_snippet

    $api->delete_project_snippet(
        $project_id,
        $snippet_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/snippets/:snippet_id>.

=item project_snippet_content

    my $content = $api->project_snippet_content(
        $project_id,
        $snippet_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/raw> and returns the decoded response content.

=item project_snippet_user_agent_detail

    my $user_agent = $api->project_snippet_user_agent_detail(
        $project_id,
        $snippet_id,
    );

Sends a C<GET> request to C<projects/:project_id/snippets/:snippet_id/user_agent_detail> and returns the decoded response content.

=back

=head2 Protected branches

See L<https://docs.gitlab.com/ce/api/protected_branches.html>.

=over

=item protected_branches

    my $branches = $api->protected_branches(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/protected_branches> and returns the decoded response content.

=item protected_branch

    my $branch = $api->protected_branch(
        $project_id,
        $branch_name,
    );

Sends a C<GET> request to C<projects/:project_id/protected_branches/:branch_name> and returns the decoded response content.

=item protect_branch

    my $branch = $api->protect_branch(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/protected_branches> and returns the decoded response content.

=item unprotect_branch

    $api->unprotect_branch(
        $project_id,
        $branch_name,
    );

Sends a C<DELETE> request to C<projects/:project_id/protected_branches/:branch_name>.

=back

=head2 Repositories

See L<https://docs.gitlab.com/ce/api/repositories.html>.

=over

=item tree

    my $tree = $api->tree(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/tree> and returns the decoded response content.

=item blob

    my $blob = $api->blob(
        $project_id,
        $sha,
    );

Sends a C<GET> request to C<projects/:project_id/repository/blobs/:sha> and returns the decoded response content.

=item raw_blob

    my $raw_blob = $api->raw_blob(
        $project_id,
        $sha,
    );

Sends a C<GET> request to C<projects/:project_id/repository/blobs/:sha/raw> and returns the decoded response content.

=item archive

    my $archive = $api->archive(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/archive> and returns the decoded response content.

=item compare

    my $comparison = $api->compare(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/compare> and returns the decoded response content.

=item contributors

    my $contributors = $api->contributors(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/contributors> and returns the decoded response content.

=back

=head2 Repository files

See L<https://docs.gitlab.com/ce/api/repository_files.html>.

=over

=item file

    my $file = $api->file(
        $project_id,
        $file_path,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/files/:file_path> and returns the decoded response content.

=item raw_file

    my $content = $api->raw_file(
        $project_id,
        $file_path,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/files/:file_path/raw> and returns the raw response content.

=item create_file

    $api->create_file(
        $project_id,
        $file_path,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/files/:file_path>.

=item edit_file

    $api->edit_file(
        $project_id,
        $file_path,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/repository/files/:file_path>.

=item delete_file

    $api->delete_file(
        $project_id,
        $file_path,
        \%params,
    );

Sends a C<DELETE> request to C<projects/:project_id/repository/files/:file_path>.

=back

=head2 Runners

See L<https://docs.gitlab.com/ce/api/runners.html>.

=over

=item runners

    my $runners = $api->runners(
        \%params,
    );

Sends a C<GET> request to C<runners> and returns the decoded response content.

=item all_runners

    my $runners = $api->all_runners(
        \%params,
    );

Sends a C<GET> request to C<runners/all> and returns the decoded response content.

=item runner

    my $runner = $api->runner(
        $runner_id,
    );

Sends a C<GET> request to C<runners/:runner_id> and returns the decoded response content.

=item update_runner

    my $runner = $api->update_runner(
        $runner_id,
        \%params,
    );

Sends a C<PUT> request to C<runners/:runner_id> and returns the decoded response content.

=item delete_runner

    my $runner = $api->delete_runner(
        $runner_id,
    );

Sends a C<DELETE> request to C<runners/:runner_id> and returns the decoded response content.

=item runner_jobs

    my $jobs = $api->runner_jobs(
        $runner_id,
        \%params,
    );

Sends a C<GET> request to C<runners/:runner_id/jobs> and returns the decoded response content.

=item project_runners

    my $runners = $api->project_runners(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/runners> and returns the decoded response content.

=item enable_project_runner

    my $runner = $api->enable_project_runner(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/runners> and returns the decoded response content.

=item disable_project_runner

    my $runner = $api->disable_project_runner(
        $project_id,
        $runner_id,
    );

Sends a C<DELETE> request to C<projects/:project_id/runners/:runner_id> and returns the decoded response content.

=back

=head2 Services

See L<https://docs.gitlab.com/ce/api/services.html>.

=over

=item project_service

    my $service = $api->project_service(
        $project_id,
        $service_name,
    );

Sends a C<GET> request to C<projects/:project_id/services/:service_name> and returns the decoded response content.

=item edit_project_service

    $api->edit_project_service(
        $project_id,
        $service_name,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/services/:service_name>.

=item delete_project_service

    $api->delete_project_service(
        $project_id,
        $service_name,
    );

Sends a C<DELETE> request to C<projects/:project_id/services/:service_name>.

=back

=head2 Application settings

See L<https://docs.gitlab.com/ce/api/settings.html>.

=over

=item settings

    my $settings = $api->settings();

Sends a C<GET> request to C<application/settings> and returns the decoded response content.

=item update_settings

    my $settings = $api->update_settings(
        \%params,
    );

Sends a C<PUT> request to C<application/settings> and returns the decoded response content.

=back

=head2 Sidekiq Metrics

See L<https://docs.gitlab.com/ce/api/sidekiq_metrics.html>.

=over

=item queue_metrics

    my $metrics = $api->queue_metrics();

Sends a C<GET> request to C<sidekiq/queue_metrics> and returns the decoded response content.

=item process_metrics

    my $metrics = $api->process_metrics();

Sends a C<GET> request to C<sidekiq/process_metrics> and returns the decoded response content.

=item job_stats

    my $stats = $api->job_stats();

Sends a C<GET> request to C<sidekiq/job_stats> and returns the decoded response content.

=item compound_metrics

    my $metrics = $api->compound_metrics();

Sends a C<GET> request to C<sidekiq/compound_metrics> and returns the decoded response content.

=back

=head2 System hooks

See L<https://docs.gitlab.com/ce/api/system_hooks.html>.

=over

=item hooks

    my $hooks = $api->hooks(
        \%params,
    );

Sends a C<GET> request to C<hooks> and returns the decoded response content.

=item create_hook

    $api->create_hook(
        \%params,
    );

Sends a C<POST> request to C<hooks>.

=item test_hook

    my $hook = $api->test_hook(
        $hook_id,
    );

Sends a C<GET> request to C<hooks/:hook_id> and returns the decoded response content.

=item delete_hook

    $api->delete_hook(
        $hook_id,
    );

Sends a C<DELETE> request to C<hooks/:hook_id>.

=back

=head2 Tags

See L<https://docs.gitlab.com/ce/api/tags.html>.

=over

=item tags

    my $tags = $api->tags(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/repository/tags> and returns the decoded response content.

=item tag

    my $tag = $api->tag(
        $project_id,
        $tag_name,
    );

Sends a C<GET> request to C<projects/:project_id/repository/tags/:tag_name> and returns the decoded response content.

=item create_tag

    my $tag = $api->create_tag(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/tags> and returns the decoded response content.

=item delete_tag

    $api->delete_tag(
        $project_id,
        $tag_name,
    );

Sends a C<DELETE> request to C<projects/:project_id/repository/tags/:tag_name>.

=item create_release

    $api->create_release(
        $project_id,
        $tag_name,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/repository/tags/:tag_name/release>.

=item edit_release

    $api->edit_release(
        $project_id,
        $tag_name,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/repository/tags/:tag_name/release>.

=back

=head2 Todos

See L<https://docs.gitlab.com/ce/api/todos.html>.

=over

=item todos

    my $todos = $api->todos(
        \%params,
    );

Sends a C<GET> request to C<todos> and returns the decoded response content.

=item mark_todo_done

    my $todo = $api->mark_todo_done(
        $todo_id,
    );

Sends a C<POST> request to C<todos/:todo_id/mark_as_done> and returns the decoded response content.

=item mark_all_todos_done

    $api->mark_all_todos_done();

Sends a C<POST> request to C<todos/mark_as_done>.

=back

=head2 Users

See L<https://docs.gitlab.com/ce/api/users.html>.

=over

=item users

    my $users = $api->users(
        \%params,
    );

Sends a C<GET> request to C<users> and returns the decoded response content.

=item user

    my $user = $api->user(
        $user_id,
    );

Sends a C<GET> request to C<users/:user_id> and returns the decoded response content.

=item create_user

    $api->create_user(
        \%params,
    );

Sends a C<POST> request to C<users>.

=item edit_user

    $api->edit_user(
        $user_id,
        \%params,
    );

Sends a C<PUT> request to C<users/:user_id>.

=item delete_user

    $api->delete_user(
        $user_id,
    );

Sends a C<DELETE> request to C<users/:user_id>.

=item current_user

    my $user = $api->current_user();

Sends a C<GET> request to C<user> and returns the decoded response content.

=item current_user_ssh_keys

    my $keys = $api->current_user_ssh_keys(
        \%params,
    );

Sends a C<GET> request to C<user/keys> and returns the decoded response content.

=item user_ssh_keys

    my $keys = $api->user_ssh_keys(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/keys> and returns the decoded response content.

=item user_ssh_key

    my $key = $api->user_ssh_key(
        $key_id,
    );

Sends a C<GET> request to C<user/keys/:key_id> and returns the decoded response content.

=item create_current_user_ssh_key

    $api->create_current_user_ssh_key(
        \%params,
    );

Sends a C<POST> request to C<user/keys>.

=item create_user_ssh_key

    $api->create_user_ssh_key(
        $user_id,
        \%params,
    );

Sends a C<POST> request to C<users/:user_id/keys>.

=item delete_current_user_ssh_key

    $api->delete_current_user_ssh_key(
        $key_id,
    );

Sends a C<DELETE> request to C<user/keys/:key_id>.

=item delete_user_ssh_key

    $api->delete_user_ssh_key(
        $user_id,
        $key_id,
    );

Sends a C<DELETE> request to C<users/:user_id/keys/:key_id>.

=item current_user_gpg_keys

    my $keys = $api->current_user_gpg_keys(
        \%params,
    );

Sends a C<GET> request to C<user/gpg_keys> and returns the decoded response content.

=item current_user_gpg_key

    my $key = $api->current_user_gpg_key(
        $key_id,
    );

Sends a C<GET> request to C<user/gpg_keys/:key_id> and returns the decoded response content.

=item create_current_user_gpg_key

    $api->create_current_user_gpg_key(
        \%params,
    );

Sends a C<POST> request to C<user/gpg_keys>.

=item delete_current_user_gpg_key

    $api->delete_current_user_gpg_key(
        $key_id,
    );

Sends a C<DELETE> request to C<user/gpg_keys/:key_id>.

=item user_gpg_keys

    my $keys = $api->user_gpg_keys(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/gpg_keys> and returns the decoded response content.

=item user_gpg_key

    my $key = $api->user_gpg_key(
        $user_id,
        $key_id,
    );

Sends a C<GET> request to C<users/:user_id/gpg_keys/:key_id> and returns the decoded response content.

=item create_user_gpg_key

    my $keys = $api->create_user_gpg_key(
        $user_id,
        \%params,
    );

Sends a C<POST> request to C<users/:user_id/gpg_keys> and returns the decoded response content.

=item delete_user_gpg_key

    $api->delete_user_gpg_key(
        $user_id,
        $key_id,
    );

Sends a C<DELETE> request to C<users/:user_id/gpg_keys/:key_id>.

=item current_user_emails

    my $emails = $api->current_user_emails(
        \%params,
    );

Sends a C<GET> request to C<user/emails> and returns the decoded response content.

=item user_emails

    my $emails = $api->user_emails(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/emails> and returns the decoded response content.

=item current_user_email

    my $email = $api->current_user_email(
        $email_id,
    );

Sends a C<GET> request to C<user/emails/:email_id> and returns the decoded response content.

=item create_current_user_email

    my $email = $api->create_current_user_email(
        \%params,
    );

Sends a C<POST> request to C<user/emails> and returns the decoded response content.

=item create_user_email

    my $email = $api->create_user_email(
        $user_id,
        \%params,
    );

Sends a C<POST> request to C<users/:user_id/emails> and returns the decoded response content.

=item delete_current_user_email

    $api->delete_current_user_email(
        $email_id,
    );

Sends a C<DELETE> request to C<user/emails/:email_id>.

=item delete_user_email

    $api->delete_user_email(
        $user_id,
        $email_id,
    );

Sends a C<DELETE> request to C<users/:user_id/emails/:email_id>.

=item block_user

    my $success = $api->block_user(
        $user_id,
    );

Sends a C<POST> request to C<users/:user_id/block> and returns the decoded response content.

=item unblock_user

    my $success = $api->unblock_user(
        $user_id,
    );

Sends a C<POST> request to C<users/:user_id/unblock> and returns the decoded response content.

=item user_impersonation_tokens

    my $tokens = $api->user_impersonation_tokens(
        $user_id,
        \%params,
    );

Sends a C<GET> request to C<users/:user_id/impersonation_tokens> and returns the decoded response content.

=item user_impersonation_token

    my $token = $api->user_impersonation_token(
        $user_id,
        $impersonation_token_id,
    );

Sends a C<GET> request to C<users/:user_id/impersonation_tokens/:impersonation_token_id> and returns the decoded response content.

=item create_user_impersonation_token

    my $token = $api->create_user_impersonation_token(
        $user_id,
        \%params,
    );

Sends a C<POST> request to C<users/:user_id/impersonation_tokens> and returns the decoded response content.

=item delete_user_impersonation_token

    $api->delete_user_impersonation_token(
        $user_id,
        $impersonation_token_id,
    );

Sends a C<DELETE> request to C<users/:user_id/impersonation_tokens/:impersonation_token_id>.

=item all_user_activities

    my $activities = $api->all_user_activities(
        \%params,
    );

Sends a C<GET> request to C<user/activities> and returns the decoded response content.

=back

=head2 Validate the .gitlab-ci.yml

See L<https://docs.gitlab.com/ce/api/lint.html>.

=over

=item lint

    my $result = $api->lint(
        \%params,
    );

Sends a C<POST> request to C<lint> and returns the decoded response content.

=back

=head2 Version

See L<https://docs.gitlab.com/ce/api/version.html>.

=over

=item version

    my $version = $api->version();

Sends a C<GET> request to C<version> and returns the decoded response content.

=back

=head2 Wikis

See L<https://docs.gitlab.com/ce/api/wikis.html>.

=over

=item wiki_pages

    my $pages = $api->wiki_pages(
        $project_id,
        \%params,
    );

Sends a C<GET> request to C<projects/:project_id/wikis> and returns the decoded response content.

=item wiki_page

    my $pages = $api->wiki_page(
        $project_id,
        $slug,
    );

Sends a C<GET> request to C<projects/:project_id/wikis/:slug> and returns the decoded response content.

=item create_wiki_page

    my $page = $api->create_wiki_page(
        $project_id,
        \%params,
    );

Sends a C<POST> request to C<projects/:project_id/wikis> and returns the decoded response content.

=item edit_wiki_page

    my $page = $api->edit_wiki_page(
        $project_id,
        $slug,
        \%params,
    );

Sends a C<PUT> request to C<projects/:project_id/wikis/:slug> and returns the decoded response content.

=item delete_wiki_page

    $api->delete_wiki_page(
        $project_id,
        $slug,
    );

Sends a C<DELETE> request to C<projects/:project_id/wikis/:slug>.

=back


sub raw_snippet {
    my $self = shift;
    warn "The raw_snippet method is deprecated, please use the snippet_content method instead";
    return $self->snippet_content( @_ );
}

1;
__END__

=head1 SEE ALSO

L<Net::Gitlab> purports to provide an interface to the GitLab API, but
it is hard to tell due to a complete lack of documentation via either
POD or unit tests.

=head1 CONTRIBUTING

This module is auto-generated from a set of YAML files defining the
interface of GitLab's API.  If you'd like to contribute to this module
then please feel free to make a
L<fork on GitHub|https://github.com/bluefeet/GitLab-API-v4>
and submit a pull request, just make sure you edit the files in the
C<authors/> directory instead of C<lib/GitLab/API/v4.pm> directly.

Please see
L<https://github.com/bluefeet/GitLab-API-v4/blob/master/author/README.pod>
for more information.

Alternatively, you can
L<open a ticket|https://github.com/bluefeet/GitLab-API-v4/issues>.

=head1 AUTHOR

Aran Clary Deltac <bluefeetE<64>gmail.com>

=head1 CONTRIBUTORS

=over

=item *

Dotan Dimet <dotanE<64>corky.net>

=item *

Nigel Gregoire <nigelgregoireE<64>gmail.com>

=item *

trunov-ms <trunov.msE<64>gmail.com>

=item *

Marek R. Sotola <Marek.R.SotolaE<64>nasa.gov>

=item *

José Joaquín Atria <jjatriaE<64>gmail.com>

=item *

Dave Webb <githubE<64>d5ve.com>

=item *

Simon Ruderich <simonE<64>ruderich.org>

=item *

royce55 <royceE<64>ecs.vuw.ac.nz>

=item *

gregor herrmann <gregoaE<64>debian.org>

=back

=head1 ACKNOWLEDGEMENTS

Thanks to L<ZipRecruiter|https://www.ziprecruiter.com/>
for encouraging their employees to contribute back to the open
source ecosystem.  Without their dedication to quality software
development this distribution would not exist.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
